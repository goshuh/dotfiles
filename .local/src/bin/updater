#!/usr/bin/python

import os
import sys

import re
import shutil
import tempfile
import subprocess


class Updater(object):

    SNAP     = ['data-dir',
                'gnome-platform',
                'lib',
                'meta',
                'scripts',
                'usr',
                'command.sh',
                'desktop-common.sh',
                'desktop-gnome-specific.sh',
                'desktop-init.sh']

    ELECTRON = ['LICENSE.electron.txt',
                'LICENSE.txt',
                'LICENSES.chromium.html',
                'NOTICE.txt',
                'README.md',
                'app_icon.png',
                'chromium_100_percent.pak',
                'chromium_200_percent.pak',
                'icudtl.dat',
                'resources.pak',
                'snapshot_blob.bin',
                'v8_context_snapshot.bin',
                'vk_swiftshader_icd.json']

    def __init__(self):
        self.curr = ''

    def rmdir(self, *a):
        for s in a:
            if os.path.isdir(s):
                shutil.rmtree(s)
            else:
                os.remove(s)

    def chmod(self, f, m = 0o644):
        os.chmod(f, m)

    def chdir(self, d):
        os.chdir(d)
        return d

    def spawn(self, *a, **kw):
        subprocess.run([*a],
                       shell  = False,
                       check  = False,
                       input  = kw.get('inb', None),
                       stdout = kw.get('out', subprocess.DEVNULL),
                       stderr = kw.get('err', subprocess.DEVNULL))

    def untar(self, a):
        self.spawn('tar', 'xf', a)

    def unzip(self, a):
        self.spawn('unzip', a)

    def undeb(self, a):
        self.spawn('ar', 'x', a)
        self.untar(self.find('data.tar.'))

    def unsnp(self, a):
        self.spawn('unsquashfs', '-d', 'extracted', a)
        self.chmod('extracted', 0o755)

    def find(self, p, r = None):
        for d in os.listdir(r):
            if re.search(p, d):
                return os.path.join(r, d) if r else d

        return 'NOT-FOUND'

    def temp(self):
        return tempfile.mkdtemp()

    def copy(self, *a, **kw):
        func = kw.get('func', lambda x: x)
        for s in a:
            if (d := os.path.join(self.curr, func(os.path.basename(s)))) != s:
                shutil.copy(s, d)

    def move(self, *a, **kw):
        func = kw.get('func', lambda x: x)
        for s in a:
            if (d := os.path.join(self.curr, func(os.path.basename(s)))) != s:
                os.rename(s, d)

    def sync(self, src, **kw):
        dst  = kw.get('func', lambda x: x)(self.curr)
        excl = kw.get('excl', [])
        excl = [excl] if isinstance(excl, str) else excl

        self.spawn('rsync',
                   '-a',
                   '-v',
                   '--del',
                   *[x for e in excl for x in ['--exclude', e]],
                    os.path.join(src, ''),
                    os.path.join(dst, ''))

        if (post := kw.get('post', None)):
            for r, ds, fs in os.walk(dst):
                p = os.path.relpath(r, dst)
                for d in ds:
                    post(p, d)
                for f in fs:
                    post(p, f)

    def post_electron(d, f):
        fn = os.path.join(self.curr, d, f)
        if (d == 'locales'   or
            d == 'resources' or
            d == '.'         and f in Updater.ELECTRON):
            self.chmod(fn)
        return fn

    def reg(p):
        def dec(f):
            f.__pat__ = p
            return f
        return dec

    @reg(r'discord.*\.deb')
    def upd_discord(self):
        self.sync('usr/share/discord')

    @reg(r'drawio.*\.deb')
    def upd_drawio(self):
        self.sync('opt/drawio')
        self.copy('usr/share/icons/hicolor/256x256/apps/drawio.png')

    @reg(r'master-pdf-editor-.*\.deb')
    def upd_pdfeditor(self):
        self.sync('opt/master-pdf-editor-5',
                   excl = ['masterpdfeditor5',
                           'masterpdfeditor5.png'])
        self.copy('opt/master-pdf-editor-5/masterpdfeditor5',
                   func = lambda x: 'pdfeditor')
        self.copy('opt/master-pdf-editor-5/masterpdfeditor5.png',
                   func = lambda x: 'pdfeditor.png')

    @reg(r'slack.*\.deb')
    def upd_slack(self):
        self.sync('usr/lib/slack')
        self.copy('usr/share/pixmaps/slack.png')

    @reg(r'spotify.*\.deb')
    def upd_spotify(self):
        self.sync('usr/share/spotify')

    @reg(r'teams_.*\.deb')
    def upd_teams(self):
        self.sync('usr/share/teams')
        self.copy('usr/share/pixmaps/teams.png')

    @reg(r'teamviewer.*\.tar\.xz')
    def upd_teamview(self):
        self.sync('teamviewer')

    @reg(r'tor-browser-linux-x86_64.*\.tar.xz')
    def upd_tor(self):
        self.sync('tor-browser/Browser')

    @reg(r'tsetup\..*\.tar\.xz')
    def upd_telegram(self):
        self.sync('Telegram/Telegram')

    @reg(r'tradingview.*\.deb')
    def upd_tradingview(self):
        self.sync('opt/TradingView',
                   excl = Updater.SNAP)
        self.copy('usr/share/icons/hicolor/512x512/apps/tradingview.png',
                   func = lambda x: 'tradingview.png')

    @reg(r'wps-office.*\.deb')
    def upd_wps(self):
        self.sync('opt/kingsoft/wps-office/office6')
        self.copy('usr/share/icons/hicolor/256x256/mimetypes/wps-office2019-wpsmain.png',
                  'usr/share/icons/hicolor/256x256/mimetypes/wps-office2019-etmain.png',
                  'usr/share/icons/hicolor/256x256/mimetypes/wps-office2019-wppmain.png',
                  'usr/share/icons/hicolor/256x256/mimetypes/wps-office2019-kprometheus.png',
                  'usr/share/icons/hicolor/256x256/mimetypes/wps-office2019-pdfmain.png',
                   func = lambda x: x.replace('office2019-', '').replace('main', '').replace('kpro', 'pro'))

    @reg(r'vivaldi-stable_.*\.deb')
    def upd_vivaldi(self):
        self.sync('opt/vivaldi')

    @reg(r'code.*\.deb')
    def upd_vscode(self):
        self.sync('usr/share/code',
                   excl = 'cli')

    @reg(r'zoom.*\.pkg\.tar\.xz')
    def upd_zoom(self):
        self.sync('opt/zoom')
        self.copy('usr/share/pixmaps/Zoom.png',
                   func = lambda x: 'zoom.png')

    @reg(r'Zotero.*\.tar\.bz2')
    def upd_zotero(self):
        self.sync('Zotero_linux-x86_64',
                   excl = 'zotero')

    def __call__(self, fn):
        fp   = os.path.abspath(fn)
        dp   = self.chdir(self.temp())
        func = None

        for f in map(lambda x: getattr(self, x), dir(self)):
            if not (p := getattr(f, '__pat__', '')):
                continue
            if re.match(p, fn):
                func = f
                break

        if not func:
            sys.exit(f'ERROR: not recognized file: {fn}')

        self.curr = os.path.join(os.environ['HOME'], '.local', 'opt', f.__name__.replace('upd_', ''))

        if   fn.endswith(('.tgz', '.tar.gz', '.tar.xz', 'tar.bz2')):
            self.untar(fp)
        elif fn.endswith('.deb'):
            self.undeb(fp)
        elif fn.endswith('.zip'):
            self.unzip(fp)
        elif fn.endswith('.snap'):
            self.unsnp(fp)
        else:
            sys.exit(f'ERROR: not recognized file: {fn}')

        func()
        self.chdir('/')
        self.rmdir(dp)


if __name__ == '__main__':
    if len(sys.argv) < 2:
        sys.exit()

    Updater()(sys.argv[1])
